curve_keystore(3)
=================

NAME
----
curve_keystore - keystore management

SYNOPSIS
--------
----
//  Constructor, creates a new, empty keystore in memory
CZMQ_EXPORT curve_keystore_t *
    curve_keystore_new (void);
    
//  Destructor
CZMQ_EXPORT void
    curve_keystore_destroy (curve_keystore_t **self_p);

//  Load keystore data from disk. Returns zero if OK, -1 on error.
CZMQ_EXPORT int
    curve_keystore_load (curve_keystore_t *self, char *filename);
    
//  Save keystore to disk, overwriting any file with the same name.
//  Returns zero if OK, -1 on error.
CZMQ_EXPORT int
    curve_keystore_save (curve_keystore_t *self, char *filename);

//  Put a keypair into the keystore indexed by some chosen key name.
CZMQ_EXPORT void
    curve_keystore_put (curve_keystore_t *self, char *name, 
                        curve_keypair_t *keypair);

//  Get a keypair from the keystore; returns a valid keypair, or
//  NULL if the key name did not exist.
CZMQ_EXPORT curve_keypair_t *
    curve_keystore_get (curve_keystore_t *self, char *name);

//  Self test of this class
void
    curve_keystore_test (bool verbose);
----

DESCRIPTION
-----------

Manages a set of keys, held in a single text file. This is called a
"keystore". The keystore is always private to the creating user, and
since it contains secret keys, should never be shared.


EXAMPLE
-------
.From curve_keystore_test method
----
    curve_keystore_t *keystore = curve_keystore_new ();
    curve_keypair_t *client_keypair = curve_keypair_new ();
    assert (client_keypair);
    curve_keystore_put (keystore, "client", client_keypair);
    curve_keypair_t *server_keypair = curve_keypair_new ();
    assert (server_keypair);
    curve_keystore_put (keystore, "server", server_keypair);
    int rc = curve_keystore_save (keystore, ".keystore");
    assert (rc == 0);
    assert (zfile_exists (".keystore"));
    curve_keystore_destroy (&keystore);

    keystore = curve_keystore_new ();
    rc = curve_keystore_load (keystore, ".keystore");
    assert (rc == 0);
    curve_keypair_t *keypair = curve_keystore_get (keystore, "client");
    assert (keypair);
    assert (curve_keypair_eq (keypair, client_keypair));
    curve_keypair_destroy (&keypair);

    keypair = curve_keystore_get (keystore, "server");
    assert (keypair);
    assert (curve_keypair_eq (keypair, server_keypair));
    curve_keypair_destroy (&keypair);

    curve_keypair_destroy (&client_keypair);
    curve_keypair_destroy (&server_keypair);
    curve_keystore_destroy (&keystore);

    //  Done, clean-up
//     zfile_delete (".keystore");
----

SEE ALSO
--------
linkczmq:czmq[7]
